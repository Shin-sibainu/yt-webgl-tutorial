import Head from "next/head";
import Image from "next/image";
import styles from "@/styles/Home.module.css";
import * as THREE from "three";
import { useEffect, useRef } from "react";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";

export default function Home() {
  const containerRef: any = useRef();

  useEffect(() => {
    const container: any = containerRef.current;
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    container.appendChild(renderer.domElement);

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(
      75,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    camera.position.z = 5;

    // Add OrbitControls
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled
    controls.dampingFactor = 0.05;
    controls.update();

    const vertexShader = `
    varying vec2 vUv;
    uniform float u_time;
    void main() {
      vUv = uv;
      vec3 pos = position;
      pos.z += sin(uv.y * 10.0 + u_time) * 0.5;
      gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
    }
  `;

    const fragmentShader = `
    uniform float u_time;
    varying vec2 vUv;
    void main() {
      gl_FragColor = vec4(vUv, sin(u_time), 1.0);
    }
  `;

    //white noise
    //   const vertexShader = `
    //   varying vec2 vUv;
    //   uniform float u_time;
    //   void main() {
    //     vUv = uv;
    //     vec3 pos = position;
    //     pos.z += 0.1 * sin(0.1 * pos.x + u_time);
    //     gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
    //   }
    // `;

    // const fragmentShader = `
    //   uniform float u_time;
    //   varying vec2 vUv;
    //   void main() {
    //     float brightness = fract(sin(dot(vUv, vec2(12.9898, 78.233))) * 43758.5453);
    //     gl_FragColor = vec4(vec3(brightness), 1.0);
    //   }
    // `;

    const material = new THREE.ShaderMaterial({
      uniforms: {
        u_time: { value: 0.0 },
      },
      vertexShader: vertexShader,
      fragmentShader: fragmentShader,
    });

    const geometry = new THREE.PlaneGeometry(5, 5, 50, 50);
    const mesh = new THREE.Mesh(geometry, material);
    scene.add(mesh);

    const animate = function () {
      requestAnimationFrame(animate);
      controls.update();
      material.uniforms.u_time.value = performance.now() / 1000;
      renderer.render(scene, camera);
    };

    animate();

    const onWindowResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };

    window.addEventListener("resize", onWindowResize);

    return () => {
      window.removeEventListener("resize", onWindowResize);
      container.removeChild(renderer.domElement);
    };
  }, []);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div ref={containerRef} className={styles.container} />
    </>
  );
}
